# Generated by Django 3.2.16 on 2022-12-11 23:52

import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import nautobot.extras.models.mixins
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("nautobot_firewall_models", "0014_custom_status_application"),
        ("dcim", "0019_device_redundancy_group_data_migration"),
        ("extras", "0053_relationship_required_on"),
    ]

    operations = [
        migrations.CreateModel(
            name="ControlPlaneSystem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=100)),
                ("verify_ssl", models.BooleanField(default=True)),
                ("port", models.PositiveSmallIntegerField(default=443)),
                ("fqdn_or_ip", models.CharField(max_length=100)),
                (
                    "device",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="panorama",
                        to="dcim.device",
                    ),
                ),
                (
                    "secrets_group",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="extras.secretsgroup",
                    ),
                ),
                ("tags", taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag")),
            ],
            options={
                "verbose_name": "Control Plane System",
                "verbose_name_plural": "Control Plane Systems",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="LogicalGroup",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("name", models.CharField(max_length=48)),
                (
                    "control_plane",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="logical_groups",
                        to="nautobot_ssot_panorama.controlplanesystem",
                    ),
                ),
            ],
            options={
                "verbose_name": "Logical Group",
                "verbose_name_plural": "Logical Groups",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="VirtualSystem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("created", models.DateField(auto_now_add=True, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "_custom_field_data",
                    models.JSONField(blank=True, default=dict, encoder=django.core.serializers.json.DjangoJSONEncoder),
                ),
                ("system_id", models.PositiveSmallIntegerField()),
                ("name", models.CharField(max_length=48)),
                (
                    "device",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="vsys", to="dcim.device"
                    ),
                ),
            ],
            options={
                "verbose_name": "Virtual System",
                "verbose_name_plural": "Virtual Systems",
                "ordering": ["name"],
            },
            bases=(
                models.Model,
                nautobot.extras.models.mixins.DynamicGroupMixin,
                nautobot.extras.models.mixins.NotesMixin,
            ),
        ),
        migrations.CreateModel(
            name="VirtualSystemAssociation",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("iface", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="dcim.interface")),
                (
                    "vsys",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_ssot_panorama.virtualsystem"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="virtualsystem",
            name="interfaces",
            field=models.ManyToManyField(
                related_name="assigned_vsys",
                through="nautobot_ssot_panorama.VirtualSystemAssociation",
                to="dcim.Interface",
            ),
        ),
        migrations.AddField(
            model_name="virtualsystem",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.CreateModel(
            name="LogicalGroupToVirtualSystem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_ssot_panorama.logicalgroup"
                    ),
                ),
                (
                    "vsys",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_ssot_panorama.virtualsystem"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LogicalGroupToDevice",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("device", models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to="dcim.device")),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="nautobot_ssot_panorama.logicalgroup"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="logicalgroup",
            name="devices",
            field=models.ManyToManyField(
                related_name="logical_group", through="nautobot_ssot_panorama.LogicalGroupToDevice", to="dcim.Device"
            ),
        ),
        migrations.AddField(
            model_name="logicalgroup",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="nautobot_ssot_panorama.logicalgroup",
            ),
        ),
        migrations.AddField(
            model_name="logicalgroup",
            name="post_policy",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="post_policy",
                to="nautobot_firewall_models.policy",
            ),
        ),
        migrations.AddField(
            model_name="logicalgroup",
            name="pre_policy",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="pre_policy",
                to="nautobot_firewall_models.policy",
            ),
        ),
        migrations.AddField(
            model_name="logicalgroup",
            name="tags",
            field=taggit.managers.TaggableManager(through="extras.TaggedItem", to="extras.Tag"),
        ),
        migrations.AddField(
            model_name="logicalgroup",
            name="virtual_systems",
            field=models.ManyToManyField(
                related_name="logical_group",
                through="nautobot_ssot_panorama.LogicalGroupToVirtualSystem",
                to="nautobot_ssot_panorama.VirtualSystem",
            ),
        ),
    ]
